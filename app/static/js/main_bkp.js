const normalizeData = (values, title) => {
    console.group(`üîç Normaliza√ß√£o de Dados para ${title}`);
    console.log('Valores originais:', values);
    
    // Tratamento espec√≠fico para SELIC
    if (title.toLowerCase().includes('selic')) {
        const numericValues = values.map((v, index) => {
            let num = typeof v === 'string' ? parseFloat(v) : v;
            
            // Log detalhado para diagn√≥stico
            console.log(`Valor original [${index}]: ${v}, Valor num√©rico: ${num}`);
            
            // Convers√£o para porcentagem se for decimal muito pequeno
            if (num < 0.1) {  // Ajuste este limite conforme necess√°rio
                const percentValue = parseFloat((num * 100).toFixed(2));
                console.log(`Convertido para %: ${percentValue}`);
                return percentValue;
            }
            
            return num;
        });

        console.log('Valores SELIC ap√≥s normaliza√ß√£o:', numericValues);
        console.groupEnd();
        return numericValues;
    }

    // Tratamento espec√≠fico para IPCA
    if (title.toLowerCase().includes('ipca')) {
        const numericValues = values.map((v, index) => {
            let num = typeof v === 'string' ? parseFloat(v) : v;
            
            // Log detalhado para diagn√≥stico
            console.log(`Valor original [${index}]: ${v}, Valor num√©rico: ${num}`);
            
            // Convers√£o para porcentagem se for decimal muito pequeno
            if (num < 0.1) {  // Ajuste este limite conforme necess√°rio
                const percentValue = parseFloat((num * 100).toFixed(2));
                console.log(`Convertido para %: ${percentValue}`);
                return percentValue;
            }
            
            return num;
        });

        console.log('Valores IPCA ap√≥s normaliza√ß√£o:', numericValues);
        console.groupEnd();
        return numericValues;
    }

    console.groupEnd();
    return values;
};

// Fun√ß√£o para calcular range do eixo y
const calculateYRange = (values, title) => {
    console.group(`üìä C√°lculo de Range para ${title}`);
    
    const normalizedValues = normalizeData(values, title);
    
    const yMin = Math.min(...normalizedValues);
    const yMax = Math.max(...normalizedValues);
    
    console.log(`Valores normalizados - Min: ${yMin}, Max: ${yMax}`);

    // Tratamentos espec√≠ficos por tipo de gr√°fico
    if (title.toLowerCase().includes('selic') || title.toLowerCase().includes('ipca')) {
        // Ajuste mais preciso para SELIC e IPCA
        const range = yMax - yMin;
        const dynamicPadding = range > 0 ? range * 0.2 : 0.5;
        
        const calculatedRange = [
            Math.max(0, yMin - dynamicPadding), 
            yMax + dynamicPadding
        ];
        
        console.log(`Range calculado: [${calculatedRange[0]}, ${calculatedRange[1]}]`);
        console.groupEnd();
        return calculatedRange;
    }

    // Para outros gr√°ficos
    const yPadding = (yMax - yMin) * 0.1;
    const calculatedRange = [yMin - yPadding, yMax + yPadding];
    
    console.log(`Range padr√£o: [${calculatedRange[0]}, ${calculatedRange[1]}]`);
    console.groupEnd();
    return calculatedRange;
};

  // Processamento de datas espec√≠fico para Desocupa√ß√£o
let processedDates = data.dates;
let processedValues = data.values;

if (title.includes('Desocupa√ß√£o')) {
    const filteredDates = [];
    const filteredValues = [];

    data.dates.forEach((dateStr, index) => {
        // Manter o formato original 'YYYYMM'
        if (parseInt(dateStr.substring(0, 4)) >= 2012 && parseInt(dateStr.substring(4, 6)) % 3 === 1) {
            filteredDates.push(dateStr);
            filteredValues.push(data.values[index]);
        }
    });

    // Usar dados filtrados se houver resultados
    if (filteredDates.length > 0) {
        processedDates = filteredDates;
        processedValues = filteredValues;
    }

    console.log('üóìÔ∏è Processed Dates:', processedDates);
    console.log('üìà Processed Values:', processedValues);
}

// Configura√ß√£o do eixo x
xaxis: {
    title: 'Per√≠odo',
    type: 'date',
    tickformat: '%Y%m'
},

    // Normalizar valores
    const normalizedValues = normalizeData(processedValues, title);

    const trace = {
        x: processedDates,
        y: normalizedValues,
        type: 'scatter',
        mode: 'lines',
        name: data.label || title,
        line: {
            color: '#2980b9',
            width: 2.5
        }
    };

    const layout = {
        title: {
            text: title,
            font: { 
                size: 18, 
                color: '#333' 
            }
        },
        xaxis: {
            title: 'Per√≠odo',
            type: 'date',
            tickformat: title.includes('Desocupa√ß√£o') ? '%Y-Q%q' : '%Y-%m',
            range: title.includes('Desocupa√ß√£o') 
                ? [new Date('2012-01-01'), new Date('2025-12-31')]
                : [new Date('2000-01-01'), new Date('2025-12-31')]
        },
        yaxis: {
            title: title.includes('IPCA') || title.includes('SELIC') 
                ? `${data.unit || 'Valor'} (%)` 
                : data.unit || 'Valor',
            range: calculateYRange(processedValues, title),
            tickformat: '.2f'
        },
        responsive: true
    };

    const config = {
        displayModeBar: false
    };

    try {
        Plotly.newPlot(elementId, [trace], layout, config);
    } catch (error) {
        console.error(`Erro ao renderizar gr√°fico ${elementId}:`, error);
    }

//
// Para cima foi modificado


/function loadChartData(endpoint, elementId, title) {
    console.log(`üîç Carregando dados para ${elementId}`);
    console.log(`üì° Endpoint: ${endpoint}, T√≠tulo: ${title}`);
    
    fetch(endpoint)
        .then(response => {
            if (!response.ok) {
                throw new Error(`Erro na requisi√ß√£o: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log(`üì¶ Dados recebidos para ${elementId}:`, data);
            const chartElement = document.getElementById(elementId);
            
            if (chartElement) {
                console.log('üéØ Elemento do gr√°fico encontrado:', chartElement);
                
                // Verificar se os dados s√£o v√°lidos antes de criar o gr√°fico
                if (data && data.dates && data.dates.length > 0 && data.values && data.values.length > 0) {
                    console.log('‚úÖ Dados v√°lidos, criando gr√°fico...');
                    console.log('üìä Detalhes dos dados:', {
                        dates: data.dates,
                        values: data.values,
                        label: data.label,
                        unit: data.unit
                    });
                    
                    // Adicionar log para verificar a fun√ß√£o createChart
                    console.log('ü§î Verificando createChart:', typeof createChart);
                    
                    createChart(elementId, data, title);
                } else {
                    console.warn(`‚ùå Dados inv√°lidos para ${elementId}:`, data);
                    chartElement.innerHTML = `<p>N√£o foi poss√≠vel carregar os dados para ${title}</p>`;
                }
            } else {
                console.warn(`üö® Elemento ${elementId} n√£o encontrado`);
            }
        })
        .catch(error => {
            console.error(`üî• Erro ao carregar dados para ${elementId}:`, error);
            const chartElement = document.getElementById(elementId);
            if (chartElement) {
                chartElement.innerHTML = `<p>Erro ao carregar dados: ${error.message}</p>`;
            }
        });
}



// Fun√ß√µes de carregamento de dados individuais
function loadPIBData() {
    loadChartData('/api/pib', 'pib-chart-full', 'PIB Trimestral - Vis√£o Detalhada');
}

function loadIPCAData() {
    loadChartData('/api/ipca', 'ipca-chart-full', 'IPCA - Vis√£o Detalhada');
}

function loadSELICData() {
    loadChartData('/api/selic', 'selic-chart-full', 'Taxa SELIC - Vis√£o Detalhada');
}

function loadDesocupacaoData() {
    loadChartData('/api/desocupacao', 'desocupacao-chart-full', 'Taxa de Desocupa√ß√£o - Vis√£o Detalhada');
}

// Fun√ß√µes de carregamento de dados para p√°gina inicial
function loadPIBDataIndex() {
    loadChartData('/api/pib', 'pib-chart', 'PIB Trimestral');
}

function loadIPCADataIndex() {
    loadChartData('/api/ipca', 'ipca-chart', 'IPCA');
}

function loadSELICDataIndex() {
    loadChartData('/api/selic', 'selic-chart', 'Taxa SELIC');
}

function loadDesocupacaoDataIndex() {
    loadChartData('/api/desocupacao', 'desocupacao-chart', 'Taxa de Desocupa√ß√£o - Trimestral');
}

// Carregar dados quando a p√°gina inicial carregar
document.addEventListener('DOMContentLoaded', function() {
    console.log('Iniciando carregamento de dados');
    
    // Dados para dashboard
    loadPIBData();
    loadIPCAData();
    loadSELICData();
    loadDesocupacaoData();

    // Dados para p√°gina inicial
    loadPIBDataIndex();
    loadIPCADataIndex();
    loadSELICDataIndex();
    loadDesocupacaoDataIndex();
});
